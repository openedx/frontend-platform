{"version":3,"file":"intl-imports.js","names":["scriptHelpDocument","fs","require","path","camelCase","loggingPrefix","basename","concat","__filename","filesCodeGeneratorNoticeHeader","generateSubdirectoryMessageFile","_ref","directory","log","writeFileSync","i18nDir","importLines","messagesLines","counter","nonEmptyLanguages","messagesDir","files","readdirSync","withFileTypes","sort","jsonFiles","filter","file","isFile","name","endsWith","length","isWritten","forEach","filename","languageCode","replace","reactIntlLanguageCode","toLowerCase","messagesCamelCaseVar","filePath","entries","JSON","parse","readFileSync","encoding","Object","keys","push","e","splice","messagesFileContent","join","generateMainMessagesFile","_ref2","processedDirectories","exportLines","processedDirectory","moduleCamelCaseVariableName","skipMessage","indexFileContent","main","_ref3","directories","pwd","includes","existsSync","lstatSync","isDirectory","map","module","process","argv","slice","text","stdout","write","env","PWD","exports"],"sources":["../../../src/i18n/scripts/intl-imports.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst scriptHelpDocument = `\nNAME\n  intl-imports.js — Script to generate the src/i18n/index.js file that exports messages from all the languages for Micro-frontends.\n\nSYNOPSIS\n  intl-imports.js [DIRECTORY ...]\n\nDESCRIPTION\n  This script is intended to run after 'atlas' has pulled the files.\n  \n  This expects to run inside a Micro-frontend root directory with the following structure:\n  \n    frontend-app-learning $ tree src/i18n/\n    src/i18n/\n    ├── index.js\n    └── messages\n        ├── frontend-app-example\n        │   ├── ar.json\n        │   ├── es_419.json\n        │   └── zh_CN.json\n        ├── frontend-component-footer\n        │   ├── ar.json\n        │   ├── es_419.json\n        │   └── zh_CN.json\n        └── frontend-component-header (empty directory)\n  \n  \n  \n  With the structure above it's expected to run with the following command in Makefile:\n  \n    \n    $ node_modules/.bin/intl-imports.js frontend-component-footer frontend-component-header frontend-app-example\n  \n  \n  It will generate two type of files:\n  \n   - Main src/i18n/index.js which overrides the Micro-frontend provided with a sample output of:\n      \n      \"\"\"\n      import messagesFromFrontendComponentFooter from './messages/frontend-component-footer';\n      // Skipped import due to missing './messages/frontend-component-footer/index.js' likely due to empty translations.\n      import messagesFromFrontendAppExample from './messages/frontend-app-example';\n   \n      export default [\n        messagesFromFrontendComponentFooter,\n        messagesFromFrontendAppExample,\n      ];\n      \"\"\"\n  \n   - Each sub-directory has src/i18n/messages/frontend-component-header/index.js which is imported by the main file.:\n   \n      \"\"\"\n      import messagesOfArLanguage from './ar.json';\n      import messagesOfDeLanguage from './de.json';\n      import messagesOfEs419Language from './es_419.json';\n      export default {\n        'ar': messagesOfArLanguage,\n        'de': messagesOfDeLanguage,\n        'es-419': messagesOfEs419Language,\n      };\n     \"\"\"\n`;\n\nconst fs = require('fs');\nconst path = require('path');\nconst camelCase = require('lodash.camelcase');\n\nconst loggingPrefix = path.basename(`${__filename}`); // the name of this JS file\n\n// Header note for generated src/i18n/index.js file\nconst filesCodeGeneratorNoticeHeader = `// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n`;\n\n/**\n * Create frontend-app-example/index.js file with proper imports.\n *\n * @param directory - a directory name containing .json files from Transifex e.g. \"frontend-app-example\".\n * @param log - Mockable process.stdout.write\n * @param writeFileSync - Mockable fs.writeFileSync\n * @param i18nDir - Path to `src/i18n` directory\n *\n * @return object - An object containing directory name and whether its \"index.js\" file was successfully written.\n */\nfunction generateSubdirectoryMessageFile({\n  directory,\n  log,\n  writeFileSync,\n  i18nDir,\n}) {\n  const importLines = [];\n  const messagesLines = [];\n  const counter = { nonEmptyLanguages: 0 };\n  const messagesDir = `${i18nDir}/messages`; // The directory of Micro-frontend i18n messages\n\n  try {\n    const files = fs.readdirSync(`${messagesDir}/${directory}`, { withFileTypes: true });\n    files.sort(); // Sorting ensures a consistent generated `index.js` order of imports cross-platforms.\n\n    const jsonFiles = files.filter(file => file.isFile() && file.name.endsWith('.json'));\n\n    if (!jsonFiles.length) {\n      log(`${loggingPrefix}: Not creating '${directory}/index.js' because no .json translation files were found.\\n`);\n      return {\n        directory,\n        isWritten: false,\n      };\n    }\n\n    jsonFiles.forEach((file) => {\n      const filename = file.name;\n      // Gets `fr_CA` from `fr_CA.json`\n      const languageCode = filename.replace(/\\.json$/, '');\n      // React-friendly language code fr_CA --> fr-ca\n      const reactIntlLanguageCode = languageCode.toLowerCase().replace(/_/g, '-');\n      // camelCase variable name\n      const messagesCamelCaseVar = camelCase(`messages_Of_${languageCode}_Language`);\n      const filePath = `${messagesDir}/${directory}/${filename}`;\n\n      try {\n        const entries = JSON.parse(fs.readFileSync(filePath, { encoding: 'utf8' }));\n\n        if (!Object.keys(entries).length) {\n          importLines.push(`// Note: Skipped empty '${filename}' messages file.`);\n          return; // Skip the language\n        }\n      } catch (e) {\n        importLines.push(`// Error: unable to parse '${filename}' messages file.`);\n        log(`${loggingPrefix}: NOTICE: Skipping '${directory}/${filename}' due to error: ${e}.\\n`);\n        return; // Skip the language\n      }\n\n      counter.nonEmptyLanguages += 1;\n      importLines.push(`import ${messagesCamelCaseVar} from './${filename}';`);\n      messagesLines.splice(1, 0, `  '${reactIntlLanguageCode}': ${messagesCamelCaseVar},`);\n    });\n\n    if (counter.nonEmptyLanguages) {\n      // See the help message above for sample output.\n      const messagesFileContent = [\n        filesCodeGeneratorNoticeHeader,\n        importLines.join('\\n'),\n        '\\nexport default {',\n        messagesLines.join('\\n'),\n        '};\\n',\n      ].join('\\n');\n\n      writeFileSync(`${messagesDir}/${directory}/index.js`, messagesFileContent);\n      return {\n        directory,\n        isWritten: true,\n      };\n    }\n    log(`${loggingPrefix}: Skipping '${directory}' because no languages were found.\\n`);\n  } catch (e) {\n    log(`${loggingPrefix}: NOTICE: Skipping '${directory}' due to error: ${e}.\\n`);\n  }\n\n  return {\n    directory,\n    isWritten: false,\n  };\n}\n\n/**\n * Create main `src/i18n/index.js` messages import file.\n *\n *\n * @param processedDirectories - List of directories with a boolean flag whether its \"index.js\" file is written\n *                               The format is \"[\\{ directory: \"frontend-component-example\", isWritten: false \\}, ...]\"\n * @param log - Mockable process.stdout.write\n * @param writeFileSync - Mockable fs.writeFileSync\n * @param i18nDir` - Path to `src/i18n` directory\n */\nfunction generateMainMessagesFile({\n  processedDirectories,\n  log,\n  writeFileSync,\n  i18nDir,\n}) {\n  const importLines = [];\n  const exportLines = [];\n\n  processedDirectories.forEach(processedDirectory => {\n    const { directory, isWritten } = processedDirectory;\n    if (isWritten) {\n      const moduleCamelCaseVariableName = camelCase(`messages_from_${directory}`);\n      importLines.push(`import ${moduleCamelCaseVariableName} from './messages/${directory}';`);\n      exportLines.push(`  ${moduleCamelCaseVariableName},`);\n    } else {\n      const skipMessage = `Skipped import due to missing '${directory}/index.js' likely due to empty translations.`;\n      importLines.push(`// ${skipMessage}.`);\n      log(`${loggingPrefix}: ${skipMessage}\\n`);\n    }\n  });\n\n  // See the help message above for sample output.\n  const indexFileContent = [\n    filesCodeGeneratorNoticeHeader,\n    importLines.join('\\n'),\n    '\\nexport default [',\n    exportLines.join('\\n'),\n    '];\\n',\n  ].join('\\n');\n\n  writeFileSync(`${i18nDir}/index.js`, indexFileContent);\n}\n\n/*\n * Main function of the file.\n */\nfunction main({\n  directories,\n  log,\n  writeFileSync,\n  pwd,\n}) {\n  const i18nDir = `${pwd}/src/i18n`; // The Micro-frontend i18n root directory\n\n  if (directories.includes('--help') || directories.includes('-h')) {\n    log(scriptHelpDocument);\n  } else if (!directories.length) {\n    log(scriptHelpDocument);\n    log(`${loggingPrefix}: Error: A list of directories is required.\\n`);\n  } else if (!fs.existsSync(i18nDir) || !fs.lstatSync(i18nDir).isDirectory()) {\n    log(scriptHelpDocument);\n    log(`${loggingPrefix}: Error: src/i18n directory was not found.\\n`);\n  } else {\n    const processedDirectories = directories.map(directory => generateSubdirectoryMessageFile({\n      directory,\n      log,\n      writeFileSync,\n      i18nDir,\n    }));\n    generateMainMessagesFile({\n      processedDirectories,\n      log,\n      writeFileSync,\n      i18nDir,\n    });\n  }\n}\n\nif (require.main === module) {\n  // Run the main() function if called from the command line.\n  main({\n    directories: process.argv.slice(2),\n    log: text => process.stdout.write(text),\n    writeFileSync: fs.writeFileSync,\n    pwd: process.env.PWD,\n  });\n}\n\nmodule.exports.main = main; // Allow tests to use the main function.\n"],"mappings":"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","ignoreList":[]}