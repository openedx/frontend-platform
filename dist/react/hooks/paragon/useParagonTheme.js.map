{"version":3,"file":"useParagonTheme.js","names":["useCallback","useEffect","useReducer","useState","SELECTED_THEME_VARIANT_KEY","logError","paragonThemeActions","paragonThemeReducer","getDefaultThemeVariant","isEmptyObject","useParagonThemeCore","useParagonThemeUrls","useParagonThemeVariants","useParagonTheme","config","_getDefaultThemeVaria","paragonThemeUrls","_ref","themeCore","core","themeVariantDefaults","defaults","themeVariants","variants","initialParagonThemeState","isThemeLoaded","themeVariant","name","_useReducer","_useReducer2","_slicedToArray","themeState","dispatch","_useState","_useState2","isCoreThemeLoaded","setIsCoreThemeLoaded","onLoadThemeCore","_useState3","_useState4","hasLoadedThemeVariants","setHasLoadedThemeVariants","onLoadThemeVariants","onLoad","handleDarkModeSystemPreferenceChange","prefersDarkMode","localStorage","getItem","dark","setParagonThemeVariant","light","concat","currentThemeVariant","onDarkModeSystemPreferenceChange","hasThemeConfig","urls","setParagonThemeLoaded"],"sources":["../../../../src/react/hooks/paragon/useParagonTheme.js"],"sourcesContent":["import {\n  useCallback, useEffect, useReducer, useState,\n} from 'react';\n\nimport { SELECTED_THEME_VARIANT_KEY } from '../../constants';\nimport { logError } from '../../../logging';\nimport { paragonThemeActions, paragonThemeReducer } from '../../reducers';\nimport { getDefaultThemeVariant, isEmptyObject } from './utils';\n\nimport useParagonThemeCore from './useParagonThemeCore';\nimport useParagonThemeUrls from './useParagonThemeUrls';\nimport useParagonThemeVariants from './useParagonThemeVariants';\n\n/**\n * Given the inputs of URLs to the CSS for the core application theme and the theme variants (e.g., light), this hook\n * will inject the CSS as `<link>` elements into the HTML document, loading each theme variant's CSS with an appropriate\n * priority based on whether its the currently active theme variant. This is done using \"alternate\" stylesheets. That\n * is,the browser will still download the CSS for the non-current theme variants, but at a lower priority than the\n * current theme variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new theme\n * variant will already be loaded.\n *\n * @memberof module:React\n * @param {object} config An object containing the URLs for the theme's core CSS and any theme (i.e., `getConfig()`)\n *\n * @returns An array containing 2 elements: 1) an object containing the app\n *  theme state, and 2) a dispatch function to mutate the app theme state.\n */\nconst useParagonTheme = (config) => {\n  const paragonThemeUrls = useParagonThemeUrls(config);\n  const {\n    core: themeCore,\n    defaults: themeVariantDefaults,\n    variants: themeVariants,\n  } = paragonThemeUrls || {};\n  const initialParagonThemeState = {\n    isThemeLoaded: false,\n    themeVariant: getDefaultThemeVariant({ themeVariants, themeVariantDefaults })?.name,\n  };\n  const [themeState, dispatch] = useReducer(paragonThemeReducer, initialParagonThemeState);\n\n  const [isCoreThemeLoaded, setIsCoreThemeLoaded] = useState(false);\n  const onLoadThemeCore = useCallback(() => {\n    setIsCoreThemeLoaded(true);\n  }, []);\n\n  const [hasLoadedThemeVariants, setHasLoadedThemeVariants] = useState(false);\n  const onLoadThemeVariants = useCallback(() => {\n    setHasLoadedThemeVariants(true);\n  }, []);\n\n  // load the core theme CSS\n  useParagonThemeCore({\n    themeCore,\n    onLoad: onLoadThemeCore,\n  });\n\n  // respond to system preference changes with regard to `prefers-color-scheme: dark`.\n  const handleDarkModeSystemPreferenceChange = useCallback((prefersDarkMode) => {\n    // Ignore system preference change if the theme variant is already set in localStorage.\n    if (localStorage.getItem(SELECTED_THEME_VARIANT_KEY)) {\n      return;\n    }\n\n    if (prefersDarkMode && themeVariantDefaults?.dark) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.dark));\n    } else if (!prefersDarkMode && themeVariantDefaults?.light) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.light));\n    } else {\n      logError(`Could not set theme variant based on system preference (prefers dark mode: ${prefersDarkMode})`, themeVariantDefaults, themeVariants);\n    }\n  }, [themeVariantDefaults, themeVariants]);\n\n  // load the theme variant(s) CSS\n  useParagonThemeVariants({\n    themeVariants,\n    onLoad: onLoadThemeVariants,\n    currentThemeVariant: themeState.themeVariant,\n    onDarkModeSystemPreferenceChange: handleDarkModeSystemPreferenceChange,\n  });\n\n  useEffect(() => {\n    // theme is already loaded, do nothing\n    if (themeState.isThemeLoaded) {\n      return;\n    }\n\n    const hasThemeConfig = (themeCore?.urls && !isEmptyObject(themeVariants));\n    if (!hasThemeConfig) {\n      // no theme URLs to load, set loading to false.\n      dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n    }\n\n    // Return early if neither the core theme CSS nor any theme variant CSS is loaded.\n    if (!isCoreThemeLoaded || !hasLoadedThemeVariants) {\n      return;\n    }\n\n    // All application theme URLs are loaded\n    dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n  }, [\n    themeState.isThemeLoaded,\n    isCoreThemeLoaded,\n    hasLoadedThemeVariants,\n    themeCore?.urls,\n    themeVariants,\n  ]);\n\n  return [themeState, dispatch];\n};\n\nexport default useParagonTheme;\n"],"mappings":"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","ignoreList":[]}